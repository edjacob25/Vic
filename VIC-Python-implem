import numpy as np
import pandas as pd
from sklearn import model_selection, metrics, multiclass, datasets, svm, linear_model, ensemble, svm



df =  pd.read_csv('/Users/jesusllanogarcia/Desktop/Projecto/Clusters/CSV/Cluster-76.csv')
df = df.replace([np.inf, -np.inf], np.nan)
df = df.replace('class_0', 0)
df = df.replace('class_1', 1)
df = df.fillna(0)
print(df.head())

y = df['Class']
X = df.drop(columns='Class')

print(X.iloc(1))

print(X)
print(y)
print(sorted(metrics.SCORERS.keys()))

print(df.dtypes)

kf = model_selection.KFold(n_splits=5, shuffle=True, random_state = 2)
clf = svm.SVC(kernel='poly', gamma='scale', probability=True)

for train_index, test_index in kf.split(X):
    print("TRAIN:", train_index, "TEST:", test_index)
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    print('is nan: ', np.isnan(X_train.any()))
    print('is inf: ', np.isfinite(X_train.all()))
    print('X_train: ', X_train, 'X_test: ', X_test)
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]
    print('y_train: ', y_train, 'y_test: ', y_test)
    print('Type: ', type(y_train))
    clf.fit(X_train, y_train)
    y_score = clf.fit(X_train, y_train).decision_function(X_test)
    print('pred_class: ', y_score)
    fpr, tpr, _ = metrics.roc_curve(y_test, y_score)
    roc_auc = metrics.auc(fpr, tpr)
    # tpr = tp/(tp+fn)
    print("Area under the ROC curve : ", roc_auc)
